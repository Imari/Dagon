////////////////////////////////////////////////////////////
//
// DAGON - An Adventure Game Engine
// Copyright (c) 2011 Senscape s.r.l.
// All rights reserved.
//
// NOTICE: Senscape permits you to use, modify, and
// distribute this file in accordance with the terms of the
// license agreement accompanying it.
//
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include "DGObject.h"

using namespace std;

static int globalID = 0;

////////////////////////////////////////////////////////////
// Implementation - Constructor
////////////////////////////////////////////////////////////

DGObject::DGObject() {
    _id = ++globalID;
    _retainCount = 0;
}

////////////////////////////////////////////////////////////
// Implementation - Destructor
////////////////////////////////////////////////////////////

DGObject::~DGObject() {
    // Do some checks here and confirm the retainCount is OK
}

////////////////////////////////////////////////////////////
// Implementation - Checks
////////////////////////////////////////////////////////////

bool DGObject::isType(unsigned int typeToCheck) {
    if (_type == typeToCheck)
        return true;
    else
        return false;
}

////////////////////////////////////////////////////////////
// Implementation - Gets
////////////////////////////////////////////////////////////

int DGObject::luaObject() {
    return _luaObject;
}

const char* DGObject::name() {
    return _name.c_str();
}

int DGObject::retainCount() {
    return _retainCount;
}

unsigned int DGObject::type() {
    return _type;
}

////////////////////////////////////////////////////////////
// Implementation - Sets
////////////////////////////////////////////////////////////

void DGObject::setLuaObject(int object) {
    _luaObject = object;
}

void DGObject::setName(const char* aName) {
    _name = aName;
}

void DGObject::setType(unsigned int type) {
    _type = type;
}

////////////////////////////////////////////////////////////
// Implementation - State changes
////////////////////////////////////////////////////////////


void DGObject::retain() {
    _retainCount++;
}

void DGObject::release() {
    _retainCount--;    
}
